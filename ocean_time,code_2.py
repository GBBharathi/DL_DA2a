# -*- coding: utf-8 -*-
"""Ocean_time,Code-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q4YrGdjPV-hcei-sNOuxYmcgSozWV1Lm
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

placer = pd.read_csv('//content/drive/MyDrive/AI Hackathon/placer/placer.csv')

validation = pd.read_csv('/content/drive/MyDrive/AI Hackathon/validation_set.txt', sep=';', header = None)
validation.columns = ['time','energy','nitrogen_Nm3h']

placer['ENDTIME'] = pd.to_datetime(placer['ENDTIME'],utc=True)

task_full_blanks = pd.read_csv('/content/drive/MyDrive/AI Hackathon/task_full_blanks.txt', sep=';', header = None)
task_full_blanks.columns = ['time','energy','nitrogen_Nm3h']

placer = placer[260224:327769]
del placer['Unnamed: 0']

placer.reset_index(inplace=True, drop=True)
placer.index = placer.index
print(placer.head())

validation = validation[0:16514]
validation.head()

validation['time'] = pd.to_datetime(validation['time'],utc=True)

placer["F_Data"]=None
for i in range(0,1000):
  for j in range(1,5000):
    if(placer.iloc[i]["ENDTIME"] < validation.iloc[j]["time"] and placer.iloc[i]["ENDTIME"] > validation.iloc[j-1]["time"]):
      placer.at[i, 'F_data'] = j
      break

placer[0:1000]



import matplotlib.pyplot as plt
import pandas as pd
from keras import models, layers

x = np.array(placer[['MODULENO','NUMCOMP','NUMBLOCKS','NUMERRORS']])

y = []

for i in range(0,1000):
  for j in range(11,23):
    print(placer.iloc[i]["F_data"])
    if(placer.iloc[i]["F_data"]==j):
      y.append(validation.iloc[i][['energy','nitrogen_Nm3h']])

y = np.array(y)

y

y = np.flip(y)
y

import tensorflow as tf
y = tf.convert_to_tensor(y)
print(y)

x

import torch
import numpy as np
y = float(y)
tensor = torch.from_numpy(y)
print(tensor)

model = models.Sequential()
model.add(layers.Dense(4, activation = 'relu',input_shape = (4,)))
model.add(layers.Dense(16,activation='relu'))
model.add(layers.Dense(8,activation='relu'))
model.add(layers.Dense(2,activation='relu'))
model.compile(optimizer='rmsprop' ,loss='categorical_crossentropy', metrics = ['accuracy'])

model.fit(x,y,epochs=5,batch_size=150)