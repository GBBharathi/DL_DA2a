# -*- coding: utf-8 -*-
"""Ocean_time,Code-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hILePPbeq69kx5qefaNXy5wpsgIhn_Lm
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

placer = pd.read_csv('//content/drive/MyDrive/AI Hackathon/placer/placer.csv')

placer

placer['Furnace_ID'] = 0

placer.head()

placer[0:2]

placer['ENDTIME'] = pd.to_datetime(placer['ENDTIME'],utc=True)

placer.dtypes

validation = pd.read_csv('/content/drive/MyDrive/AI Hackathon/validation_set.txt', sep=';', header = None)
validation.columns = ['time','energy','nitrogen_Nm3h']

validation.head()

task_full_blanks = pd.read_csv('/content/drive/MyDrive/AI Hackathon/task_full_blanks.txt', sep=';', header = None)
task_full_blanks.columns = ['time','energy','nitrogen_Nm3h']

task_full_blanks.head()

placer

placer = placer[260224:327769]
del placer['Unnamed: 0']
del placer['Furnace_ID']

placer

placer.reset_index(inplace=True, drop=True)
placer.index = placer.index
print(placer.head())

"""placer"""

validation = validation[0:16514]
validation.head()

validation['time'] = pd.to_datetime(validation['time'],utc=True)

print(placer.shape)

print(validation.shape)

placer["F_Data"]=None
for i in range(0,67545):
  for j in range(1,16514):
    if(placer.iloc[i]["ENDTIME"] < validation.iloc[j]["time"] and placer.iloc[i]["ENDTIME"] > validation.iloc[j-1]["time"]):
      placer.at[i, 'F_data'] = j
      break

placer

from keras import models, layers

x = placer.iloc['MODULENO','NUMCOMP','NUMBLOCKS','NUMERRORS']
y = placer.iloc[validation.iloc['F_data']]

model = models.Sequential()
model.add(layers.Dense(4, activation = 'relu',input_shape = (4,)))
model.add(layers.Dense(16,activation='relu'))
model.add(layers.Dense(8,activation='relu'))
model.add(layers.Dense(2,activation='relu'))
model.compile(optimizer='rmsprop' ,loss='categorical_crossentropy', metrics = ['accuracy'])

model.fit(x,y,epochs=5,batch_size=150)